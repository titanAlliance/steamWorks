// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5536.titan2017.subsystems;

import org.usfirst.frc5536.titan2017.RobotMap;
import org.usfirst.frc5536.titan2017.commands.*;
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon leftFront = RobotMap.driveTrainleftFront;
    private final CANTalon leftRear = RobotMap.driveTrainleftRear;
    private final CANTalon rightFront = RobotMap.driveTrainrightFront;
    private final CANTalon rightRear = RobotMap.driveTrainrightRear;
    private final RobotDrive mecanumDrive = RobotMap.driveTrainmecanumDrive;
    private final Ultrasonic frontUltrasonic = RobotMap.driveTrainfrontUltrasonic;
    private final Ultrasonic rearUltrasonic = RobotMap.driveTrainrearUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final ADXRS450_Gyro gyro = RobotMap.driveTrainGyro;
    
    BuiltInAccelerometer accelerometer = RobotMap.driveTrainaccelerometer;
    
    private RobotDrive drive;
    
    public final float cubicConstant = (float) 0.07;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new driveManual());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // Constructs the DriveTrain
    public driveTrain(){
        drive = new RobotDrive(leftFront, leftRear, rightFront, rightRear);
    	gyro.reset(); //Resets gyro once so field relative has one 'true' North direction
    }
    
    public void driveManual(float x, float y, float z) {
    	
    	x = cubicScale(x);
		y = cubicScale(y);
		z = cubicScale(z);
		
    	mecanumDrive.mecanumDrive_Cartesian(x, y, z, 0.0);
    	//mecanumDrive.mecanumDrive_Cartesian(x, y, z, gyro.getAngle());
    	
    }
    
    public void stop(){
    	mecanumDrive.stopMotor();
    }
   
    private float cubicScale(float arg){
    	float a;
    	a = (float) (cubicConstant*arg + (1-cubicConstant)*Math.pow((double)arg, 3));
    	return a;
    }
    
    // Method to reset the gyro
    public void resetGyro(){
    	gyro.reset();
    }
    
    // Returns the gyro angle
    public double getGyroAngle(){
    	return(gyro.getAngle());
    }
    
    // Returns front ultrasonic measurement
	public double getFrontDistance(){
		return(frontUltrasonic.getRangeInches());
	}
	
	// Returns rear ultrasonic measurement
	public double getRearDistance(){
		return(rearUltrasonic.getRangeInches());
	}
    
    public void testingInfo(){
    	SmartDashboard.putNumber("The front left val:", leftFront.get());
    	SmartDashboard.putNumber("The back left val:", leftRear.get());
    	SmartDashboard.putNumber("The front right val:", rightFront.get());
    	SmartDashboard.putNumber("The back right val:", rightRear.get());
    	
    	SmartDashboard.putNumber("Gyro value is:", Math.abs(gyro.getAngle() % 360)); //Sets the gyro values to always be positive and never go above 360 degrees
    	SmartDashboard.putNumber("The accelerometer x value is:", accelerometer.getX());
    	SmartDashboard.putNumber("The accelerometer y value is:", accelerometer.getY());
    	
    	SmartDashboard.putNumber("Distance to Object Front", frontUltrasonic.getRangeInches());
    	SmartDashboard.putNumber("Distance to Object Rear", rearUltrasonic.getRangeInches());
    }
    
}

